diff --git a/core/models.py b/core/models.py
index 1111111..2222222 100644
--- a/core/models.py
+++ b/core/models.py
@@ -1,17 +1,24 @@
 from __future__ import annotations
 from django.db import models
 from django.core.validators import MinValueValidator
-from django.utils import timezone
-from django.core.exceptions import ValidationError
-from django.contrib.auth.models import User
+from django.utils import timezone
+from django.core.exceptions import ValidationError
+from django.contrib.auth.models import User
+from django.contrib.postgres.indexes import GinIndex
+from django.contrib.postgres.search import SearchVectorField
+from django.contrib.postgres.search import SearchVector
 from .services.scheduling import ensure_no_conflict, ensure_capacity

 class Organization(models.Model):
     class Type(models.TextChoices):
         GYM = "gym", "Ginásio (ACR)"
         WELLNESS = "wellness", "Pilates/Wellness (Proform)"
         BOTH = "both", "Ambos (ACR + Proform)"
-    name = models.CharField(max_length=200)
-    domain = models.CharField(max_length=255, unique=True, help_text="Tenant domain (e.g., acr.local)")
+    name = models.CharField(max_length=200)
+    domain = models.CharField(max_length=255, unique=True, help_text="Tenant domain (e.g., acr.local)")
     org_type = models.CharField("Tipo de Organização", max_length=20, choices=Type.choices, default=Type.BOTH)
-    settings_json = models.JSONField(default=dict, blank=True)
+    settings_json = models.JSONField(default=dict, blank=True)
+    # Novo: branding por tenant
+    primary_color = models.CharField(max_length=7, default="#0d6efd")
+    secondary_color = models.CharField(max_length=7, default="#6c757d")
+    logo_svg = models.TextField(blank=True, help_text="Conteúdo SVG para branding no admin e dashboard.")

     gym_monthly_fee = models.DecimalField("Mensalidade Ginásio (ACR)", max_digits=10, decimal_places=2, default=30.00)
     wellness_monthly_fee = models.DecimalField("Mensalidade Pilates (Proform)", max_digits=10, decimal_places=2, default=45.00)
@@ -34,14 +41,31 @@ class Organization(models.Model):
         return f"{self.name} ({self.get_org_type_display()})"

 class Person(models.Model):
     class Status(models.TextChoices):
         ACTIVE = "active", "Ativo"
         INACTIVE = "inactive", "Inativo"
         SUSPENDED = "suspended", "Suspenso"
     class EntityAffiliation(models.TextChoices):
         ACR_ONLY = "acr_only", "Apenas ACR (Ginásio)"
         PROFORM_ONLY = "proform_only", "Apenas Proform (Pilates)"
         BOTH = "both", "ACR + Proform"
-    organization = models.ForeignKey(Organization, on_delete=models.CASCADE)
+    organization = models.ForeignKey(Organization, on_delete=models.PROTECT, related_name="people")
     first_name = models.CharField(max_length=120)
     last_name = models.CharField(max_length=120, blank=True)
     email = models.EmailField(blank=True)
     nif = models.CharField("NIF", max_length=20, blank=True, db_index=True)
     phone = models.CharField(max_length=50, blank=True)
     notes = models.TextField(blank=True)
+    # CRM: preferências e estado de ciclo de vida
+    lifecycle_stage = models.CharField(max_length=32, default="subscriber",
+                                       help_text="subscriber|lead|member|churn_risk|churned")
+    marketing_optin_email = models.BooleanField(default=False)
+    marketing_optin_sms = models.BooleanField(default=False)
+    # RGPD consentimentos
+    consent_terms = models.BooleanField(default=False)
+    consent_privacy = models.BooleanField(default=False)
+    consent_marketing = models.BooleanField(default=False)
+    consent_timestamp = models.DateTimeField(null=True, blank=True)
+    # Busca full-text (Postgres)
+    search = SearchVectorField(null=True, editable=False)

     date_of_birth = models.DateField("Data de Nascimento", null=True, blank=True)
-    address = models.TextField("Morada", blank=True)
+    address = models.TextField("Morada", blank=True)
     emergency_contact = models.CharField("Contacto de Emergência", max_length=100, blank=True)
-    photo = models.ImageField("Foto", upload_to='clients/', null=True, blank=True)
+    def _person_upload_to(instance, filename):
+        return f"clients/org_{instance.organization_id}/{filename}"
+    photo = models.ImageField("Foto", upload_to=_person_upload_to, null=True, blank=True)
     status = models.CharField(max_length=20, choices=Status.choices, default=Status.ACTIVE)
     created_at = models.DateTimeField("Criado em", auto_now_add=True)
     last_activity = models.DateTimeField("Última Atividade", null=True, blank=True)
@@ -71,10 +95,19 @@ class Person(models.Model):
     class Meta:
-        unique_together = [("organization", "email"), ("organization", "nif")]
+        unique_together = [("organization", "email"), ("organization", "nif")]
         ordering = ["first_name", "last_name"]
+        indexes = [
+            models.Index(fields=["organization", "status"]),
+            GinIndex(fields=["search"]),
+        ]

     def __str__(self) -> str:
         n = f"{self.first_name} {self.last_name}".strip()
         return f"{n} ({self.get_entity_affiliation_display()})"
+    def save(self, *args, **kwargs):
+        super().save(*args, **kwargs)
+        # Atualiza SearchVector (método simples; ideal usar trigger no Postgres)
+        try:
+            type(self).objects.filter(pk=self.pk).update(
+                search=SearchVector("first_name", "last_name", "email", "nif", config="portuguese"))
+        except Exception:
+            pass

 class Instructor(models.Model):
     class EntityAffiliation(models.TextChoices):
@@ -101,7 +134,11 @@ class Instructor(models.Model):
     proform_commission_rate = models.DecimalField(
         "Comissão Proform (%)", max_digits=5, decimal_places=2, default=70.00,
         help_text="Percentagem que o instrutor recebe por aulas Proform"
     )
-    class Meta:
+    class Meta:
         unique_together = [("organization", "email")]
         ordering = ["first_name", "last_name"]
+        indexes = [
+            models.Index(fields=["organization", "is_active"]),
+        ]
@@ -139,6 +176,62 @@ class Modality(models.Model):
     default_duration_minutes = models.PositiveIntegerField("Duração Padrão (min)", default=60)
     # ...

+class Campaign(models.Model):
+    """Marketing: campanhas de email/SMS segmentadas por tenant."""
+    CHANNELS = (("email","Email"),("sms","SMS"))
+    organization = models.ForeignKey(Organization, on_delete=models.PROTECT, related_name="campaigns")
+    name = models.CharField(max_length=150)
+    channel = models.CharField(max_length=16, choices=CHANNELS)
+    segment_query = models.JSONField(default=dict, help_text="Ex: {status:'active', lifecycle_stage:'lead'}")
+    subject = models.CharField(max_length=200, blank=True)
+    content = models.TextField(help_text="Template Jinja/Django para envio.")
+    scheduled_at = models.DateTimeField(null=True, blank=True)
+    sent_at = models.DateTimeField(null=True, blank=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+    class Meta:
+        ordering = ["-created_at"]
+
+class MessageLog(models.Model):
+    """Histórico de envios (auditoria/RGPD)."""
+    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE, related_name="logs")
+    person = models.ForeignKey(Person, on_delete=models.CASCADE, related_name="message_logs")
+    channel = models.CharField(max_length=16)
+    status = models.CharField(max_length=32, default="queued")  # queued|sent|failed|opened|clicked|unsubscribed
+    provider_message_id = models.CharField(max_length=128, blank=True)
+    error_message = models.TextField(blank=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+    opened_at = models.DateTimeField(null=True, blank=True)
+    clicked_at = models.DateTimeField(null=True, blank=True)
+
+class Event(models.Model):
+    """Aulas/Sessões."""
+    organization = models.ForeignKey(Organization, on_delete=models.PROTECT, related_name="events")
+    # ... (restante existente)
+    waitlist_enabled = models.BooleanField(default=True)
+    max_capacity = models.PositiveIntegerField(default=10)
+    # índices p/ Gantt
+    class Meta:
+        indexes = [
+            models.Index(fields=["organization","start_time"]),
+        ]
+
+class Booking(models.Model):
+    """Reservas com lista de espera e auto-check-in por QR."""
+    organization = models.ForeignKey(Organization, on_delete=models.PROTECT, related_name="bookings")
+    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name="bookings")
+    person = models.ForeignKey(Person, on_delete=models.CASCADE, related_name="bookings")
+    status = models.CharField(max_length=16, default="confirmed")  # confirmed|waitlist|cancelled|no_show|checked_in
+    created_at = models.DateTimeField(auto_now_add=True)
+    checkin_code = models.CharField(max_length=16, blank=True)
+    class Meta:
+        unique_together = [("event","person")]
+        indexes = [
+            models.Index(fields=["organization","created_at"]),
+        ]
+    def clean(self):
+        ensure_no_conflict(self)
+        ensure_capacity(self)
+    def mark_checked_in(self):
+        self.status = "checked_in"
+        self.save(update_fields=["status"])
+
diff --git a/core/admin.py b/core/admin.py
index 3333333..4444444 100644
--- a/core/admin.py
+++ b/core/admin.py
@@ -1,5 +1,47 @@
 from django.contrib import admin
-from .models import Organization, Person, Instructor, Modality, Event, Booking
+from .models import Organization, Person, Instructor, Modality, Event, Booking, Campaign, MessageLog
+
+@admin.register(Organization)
+class OrganizationAdmin(admin.ModelAdmin):
+    list_display = ("name","domain","org_type")
+    search_fields = ("name","domain")
+    fieldsets = (
+        ("Identificação", {"fields": ("name","domain","org_type")}),
+        ("Branding", {"fields": ("primary_color","secondary_color","logo_svg")}),
+        ("Configuração", {"fields": ("settings_json","gym_monthly_fee","wellness_monthly_fee")}),
+    )
+
+@admin.register(Person)
+class PersonAdmin(admin.ModelAdmin):
+    list_display = ("first_name","last_name","email","status","lifecycle_stage","organization")
+    list_filter = ("status","lifecycle_stage","organization")
+    search_fields = ("first_name","last_name","email","nif","phone")
+    autocomplete_fields = ("organization",)
+    readonly_fields = ("consent_timestamp",)
+    fieldsets = (
+        ("Identificação", {"fields": ("organization","first_name","last_name","email","nif","phone","photo")}),
+        ("Estado", {"fields": ("status","entity_affiliation","last_activity","lifecycle_stage")}),
+        ("Marketing & RGPD", {"fields": ("marketing_optin_email","marketing_optin_sms","consent_terms","consent_privacy","consent_marketing","consent_timestamp")}),
+        ("Outros", {"fields": ("date_of_birth","address","emergency_contact","notes")}),
+    )
+
+@admin.register(Instructor)
+class InstructorAdmin(admin.ModelAdmin):
+    list_display = ("full_name","email","is_active","organization")
+    list_filter = ("is_active","entity_affiliation","organization")
+    search_fields = ("first_name","last_name","email")
+    autocomplete_fields = ("organization",)
+
+@admin.register(Modality)
+class ModalityAdmin(admin.ModelAdmin):
+    list_display = ("name","organization","default_duration_minutes")
+    list_filter = ("entity_type","organization")
+    search_fields = ("name",)
+    autocomplete_fields = ("organization",)
+
+@admin.register(Event)
+class EventAdmin(admin.ModelAdmin):
+    list_display = ("id","organization","start_time","max_capacity","waitlist_enabled")
+    list_filter = ("organization",)
+    autocomplete_fields = ("organization",)

 @admin.register(Booking)
 class BookingAdmin(admin.ModelAdmin):
-    list_display = ("event","person","created_at")
-    list_filter = ("event",)
+    list_display = ("event","person","status","created_at","organization")
+    list_filter = ("status","organization","event")
+    autocomplete_fields = ("organization","event","person")
+
+@admin.register(Campaign)
+class CampaignAdmin(admin.ModelAdmin):
+    list_display = ("name","organization","channel","scheduled_at","sent_at")
+    list_filter = ("channel","organization")
+    search_fields = ("name",)
+    autocomplete_fields = ("organization",)
+
+@admin.register(MessageLog)
+class MessageLogAdmin(admin.ModelAdmin):
+    list_display = ("campaign","person","channel","status","created_at")
+    list_filter = ("channel","status")
+    search_fields = ("provider_message_id","error_message")

diff --git a/core/services/notifications.py b/core/services/notifications.py
new file mode 100644
--- /dev/null
+++ b/core/services/notifications.py
@@ -0,0 +1,77 @@
+"""
+Serviço de notificações (email/SMS/push).
+Implementa adaptadores para Mailchimp (email) e SMS Gateway (Twilio/CM/Sapo SMS).
+"""
+from dataclasses import dataclass
+from typing import Iterable, Optional
+from django.conf import settings
+from django.template import engines
+from core.models import Campaign, Person, MessageLog
+
+markdown = engines['django']
+
+@dataclass
+class DeliveryResult:
+    ok: bool
+    provider_id: Optional[str] = None
+    error: str = ""
+
+def render_template(content: str, context: dict) -> str:
+    return markdown.from_string(content).render(context)
+
+def send_email(person: Person, subject: str, body_html: str) -> DeliveryResult:
+    # TODO: integrar com Mailchimp/Sendgrid; aqui um stub
+    return DeliveryResult(ok=True, provider_id="stub-email-123")
+
+def send_sms(person: Person, body_text: str) -> DeliveryResult:
+    # TODO: integrar com gateway SMS
+    return DeliveryResult(ok=True, provider_id="stub-sms-123")
+
+def dispatch_campaign(campaign: Campaign, people: Iterable[Person]) -> int:
+    count = 0
+    for p in people:
+        if campaign.channel == "email" and not p.marketing_optin_email:
+            continue
+        if campaign.channel == "sms" and not p.marketing_optin_sms:
+            continue
+        content = render_template(campaign.content, {"person": p})
+        if campaign.channel == "email":
+            r = send_email(p, campaign.subject, content)
+        else:
+            r = send_sms(p, content)
+        MessageLog.objects.create(
+            campaign=campaign, person=p, channel=campaign.channel,
+            status="sent" if r.ok else "failed", provider_message_id=r.provider_id,
+            error_message="" if r.ok else r.error
+        )
+        count += 1 if r.ok else 0
+    return count
+
diff --git a/core/api_mobile.py b/core/api_mobile.py
new file mode 100644
--- /dev/null
+++ b/core/api_mobile.py
@@ -0,0 +1,120 @@
+"""
+APIs móveis (DRF ou Django views simples) para a app de sócios:
+- login, listagem de aulas, reservar, cancelar, auto-check-in via código
+"""
+from django.http import JsonResponse, HttpResponseBadRequest
+from django.views.decorators.http import require_GET, require_POST
+from django.contrib.auth.decorators import login_required
+from django.utils.crypto import get_random_string
+from django.shortcuts import get_object_or_404
+from core.models import Event, Booking, Person
+
+@login_required
+@require_GET
+def list_events(request):
+    org_id = request.GET.get("organization")
+    qs = Event.objects.select_related("organization").filter(organization_id=org_id).order_by("start_time")[:500]
+    data = [{"id": e.id, "start": e.start_time, "capacity": e.max_capacity} for e in qs]
+    return JsonResponse({"events": data})
+
+@login_required
+@require_POST
+def book_event(request, event_id: int):
+    p = get_object_or_404(Person, organization=request.user.person.organization, email=request.user.email)
+    e = get_object_or_404(Event, pk=event_id, organization=p.organization)
+    # lógica simples de capacidade e lista de espera
+    confirmed = e.bookings.filter(status="confirmed").count()
+    status = "confirmed" if confirmed < e.max_capacity else "waitlist"
+    b, _ = Booking.objects.get_or_create(event=e, person=p, defaults={"organization": p.organization, "status": status})
+    if not b.checkin_code:
+        b.checkin_code = get_random_string(8).upper()
+        b.save(update_fields=["checkin_code"])
+    return JsonResponse({"booking_id": b.id, "status": b.status, "checkin_code": b.checkin_code})
+
+@login_required
+@require_POST
+def cancel_booking(request, booking_id: int):
+    b = get_object_or_404(Booking, pk=booking_id, person__email=request.user.email)
+    b.status = "cancelled"
+    b.save(update_fields=["status"])
+    # promover 1º da waitlist, se existir
+    wl = b.event.bookings.filter(status="waitlist").order_by("created_at").first()
+    if wl:
+        wl.status = "confirmed"
+        wl.save(update_fields=["status"])
+    return JsonResponse({"ok": True})
+
+@login_required
+@require_POST
+def checkin(request):
+    code = request.POST.get("code")
+    b = get_object_or_404(Booking, checkin_code=code, person__email=request.user.email)
+    b.mark_checked_in()
+    return JsonResponse({"ok": True, "status": b.status})
+
diff --git a/core/urls.py b/core/urls.py
index 5555555..6666666 100644
--- a/core/urls.py
+++ b/core/urls.py
@@ -1,6 +1,12 @@
 from django.urls import path
-from . import views, dashboard_views, api_optimized
+from . import views, dashboard_views, api_optimized
+from . import api_mobile

 urlpatterns = [
     path("", views.home, name="home"),
     path("dashboard/", dashboard_views.dashboard, name="dashboard"),
+    # APIs mobile
+    path("api/mobile/events/", api_mobile.list_events, name="mobile_events"),
+    path("api/mobile/events/<int:event_id>/book/", api_mobile.book_event, name="mobile_book"),
+    path("api/mobile/bookings/<int:booking_id>/cancel/", api_mobile.cancel_booking, name="mobile_cancel"),
+    path("api/mobile/checkin/", api_mobile.checkin, name="mobile_checkin"),
 ]

diff --git a/templates/base.html b/templates/base.html
index 7777777..8888888 100644
--- a/templates/base.html
+++ b/templates/base.html
@@ -1,10 +1,34 @@
-<!doctype html>
-<html lang="pt">
+<!doctype html>
+<html lang="pt">
 <head>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1">
-  <title>ACR Gestão</title>
+  <title>{% block title %}ACR Gestão{% endblock %}</title>
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
+  <style>
+    :root{
+      --primary: {{ request.user.is_authenticated and request.user.person.organization.primary_color|default:"#0d6efd" }};
+    }
+    .brand-acr { color: var(--primary); }
+    .brand-logo { height: 34px; }
+  </style>
 </head>
 <body>
-  {% block content %}{% endblock %}
+  <nav class="navbar navbar-expand-lg bg-body-tertiary border-bottom">
+    <div class="container-fluid">
+      <a class="navbar-brand d-flex align-items-center gap-2" href="/">
+        <img src="{% url 'logo_svg' %}" alt="logo" class="brand-logo"/>
+        <span class="fw-bold">ACR Gestão</span>
+      </a>
+      <div class="ms-auto">
+        {% if user.is_authenticated %}
+          <span class="me-3">Olá, {{ user.first_name|default:user.username }}</span>
+          <a class="btn btn-outline-secondary btn-sm" href="/admin/">Admin</a>
+        {% endif %}
+      </div>
+    </div>
+  </nav>
+  <div class="container py-3">
+    {% block content %}{% endblock %}
+  </div>
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
 </body>
 </html>
diff --git a/core/views.py b/core/views.py
index ababab0..ababab9 100644
--- a/core/views.py
+++ b/core/views.py
@@ -1,6 +1,26 @@
 from django.shortcuts import render
 from django.contrib.auth.decorators import login_required
+from django.http import HttpResponse
+from django.utils.safestring import mark_safe
+from .models import Organization, Person, Booking, Event

 @login_required
 def home(request):
     return render(request, "home.html")
+
+def logo_svg(request):
+    """Devolve SVG do logo por tenant (melhoria de imagem/branding)."""
+    try:
+        org = None
+        if request.user.is_authenticated:
+            # se tiver person associado
+            org = getattr(getattr(request.user, "person", None), "organization", None)
+        if not org:
+            org = Organization.objects.first()
+        svg = org.logo_svg or DEFAULT_LOGO
+    except Exception:
+        svg = DEFAULT_LOGO
+    return HttpResponse(mark_safe(svg), content_type="image/svg+xml")
+
+DEFAULT_LOGO = """<svg xmlns="http://www.w3.org/2000/svg" width="180" height="34" viewBox="0 0 180 34"><rect rx="6" width="180" height="34" fill="#0d6efd"/><text x="16" y="22" font-size="16" font-family="Inter,Arial" fill="#fff">ACR Basto • Gestão</text></svg>"""
diff --git a/core/urls.py b/core/urls.py
index 6666666..6666667 100644
--- a/core/urls.py
+++ b/core/urls.py
@@ -3,6 +3,7 @@ from . import views, dashboard_views, api_optimized
 from . import api_mobile

 urlpatterns = [
+    path("logo.svg", views.logo_svg, name="logo_svg"),
     path("", views.home, name="home"),
     path("dashboard/", dashboard_views.dashboard, name="dashboard"),
     path("api/mobile/events/", api_mobile.list_events, name="mobile_events"),
diff --git a/templates/dashboard.html b/templates/dashboard.html
new file mode 100644
--- /dev/null
+++ b/templates/dashboard.html
@@ -0,0 +1,80 @@
+{% extends "base.html" %}
+{% block title %}Dashboard{% endblock %}
+{% block content %}
+<h1 class="h4 mb-3">Dashboard</h1>
+<div class="row g-3">
+  <div class="col-md-3"><div class="card"><div class="card-body">
+    <div class="fw-bold">Receita (30d)</div>
+    <div class="display-6">{{ kpis.revenue_30d|default:"€0" }}</div>
+  </div></div></div>
+  <div class="col-md-3"><div class="card"><div class="card-body">
+    <div class="fw-bold">Presenças (30d)</div>
+    <div class="display-6">{{ kpis.attendance_30d|default:"0" }}</div>
+  </div></div></div>
+  <div class="col-md-3"><div class="card"><div class="card-body">
+    <div class="fw-bold">Ocupação média</div>
+    <div class="display-6">{{ kpis.occupancy|default:"0%" }}</div>
+  </div></div></div>
+  <div class="col-md-3"><div class="card"><div class="card-body">
+    <div class="fw-bold">Churn (90d)</div>
+    <div class="display-6">{{ kpis.churn_90d|default:"0%" }}</div>
+  </div></div></div>
+</div>
+<div class="card mt-3"><div class="card-body">
+  <h2 class="h5">Tendências</h2>
+  <div id="chart-revenue" style="height: 300px;"></div>
+</div></div>
+<script>
+  // Placeholder: podes trocar por Plotly/Chart.js
+  // recebendo dados via `kpis.series`
+</script>
+{% endblock %}
diff --git a/core/dashboard_views.py b/core/dashboard_views.py
index cccccc1..ccccc2 100644
--- a/core/dashboard_views.py
+++ b/core/dashboard_views.py
@@ -1,7 +1,24 @@
 from django.contrib.auth.decorators import login_required
 from django.shortcuts import render
+from django.db.models import Count, Sum
+from django.utils import timezone
+from datetime import timedelta
+from .models import Booking, Event

 @login_required
 def dashboard(request):
-    return render(request, "dashboard.html")
+    now = timezone.now()
+    last30 = now - timedelta(days=30)
+    kpis = {
+        "revenue_30d": "€{:.2f}".format(0.00),  # TODO: somar pagamentos quando modelo existir
+        "attendance_30d": Booking.objects.filter(status="checked_in", created_at__gte=last30).count(),
+        "occupancy": "0%",  # TODO: calcular media ocupação por eventos
+        "churn_90d": "0%",  # TODO: calcular churn quando houver contratos
+        "series": [],       # preparar para gráfico
+    }
+    return render(request, "dashboard.html", {"kpis": kpis})

diff --git a/project/settings.py b/project/settings.py
index ddddddd..eeeeeee 100644
--- a/project/settings.py
+++ b/project/settings.py
@@ -1,6 +1,18 @@
 INSTALLED_APPS = [
     # ...
     "core",
+    # novos módulos
+    "django.contrib.postgres",
+    "corsheaders",
+    # "rest_framework",  # se preferires DRF
 ]
+MIDDLEWARE = [
+    "corsheaders.middleware.CorsMiddleware",
+    # ...
+]
+CORS_ALLOW_ALL_ORIGINS = True
+SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
+CSRF_TRUSTED_ORIGINS = ["https://SEU_DOMINIO_AQUI"]

 STATIC_URL = "/static/"
 STATIC_ROOT = BASE_DIR / "staticfiles"
@@ -20,6 +32,9 @@
 # Segurança produção
 SESSION_COOKIE_SECURE = True
 CSRF_COOKIE_SECURE = True
+SECURE_HSTS_SECONDS = 31536000
+SECURE_HSTS_INCLUDE_SUBDOMAINS = True
+SECURE_HSTS_PRELOAD = True

diff --git a/docker-compose.base-nginx.yml b/docker-compose.base-nginx.yml
new file mode 100644
--- /dev/null
+++ b/docker-compose.base-nginx.yml
@@ -0,0 +1,83 @@
+version: "3.9"
+services:
+  db:
+    image: postgres:16
+    environment:
+      POSTGRES_DB: ${POSTGRES_DB:-acrdb}
+      POSTGRES_USER: ${POSTGRES_USER:-acruser}
+      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-acrpass}
+    volumes:
+      - pgdata:/var/lib/postgresql/data
+    healthcheck:
+      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+
+  redis:
+    image: redis:7
+
+  web:
+    build: .
+    command: gunicorn project.wsgi:application -b 0.0.0.0:8000 --access-logfile - --error-logfile -
+    environment:
+      DJANGO_SETTINGS_MODULE: project.settings
+    volumes:
+      - .:/app
+      - staticfiles:/app/staticfiles
+    depends_on:
+      db:
+        condition: service_healthy
+    healthcheck:
+      test: ["CMD","curl","-f","http://localhost:8000/"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+
+  nginx:
+    image: nginx:1.27
+    ports: ["80:80"]
+    volumes:
+      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
+      - staticfiles:/static:ro
+    depends_on:
+      - web
+
+volumes:
+  pgdata:
+  staticfiles:
diff --git a/nginx.conf b/nginx.conf
new file mode 100644
--- /dev/null
+++ b/nginx.conf
@@ -0,0 +1,42 @@
+server {
+  listen 80;
+  server_name _;
+  client_max_body_size 25M;
+  location /static/ { alias /static/; }
+  location / {
+    proxy_pass         http://web:8000;
+    proxy_set_header   Host $host;
+    proxy_set_header   X-Real-IP $remote_addr;
+    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
+    proxy_set_header   X-Forwarded-Proto $scheme;
+  }
+}
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
new file mode 100644
--- /dev/null
+++ b/.github/workflows/ci.yml
@@ -0,0 +1,48 @@
+name: CI
+on:
+  push:
+    branches: ["**"]
+  pull_request:
+    branches: ["**"]
+jobs:
+  test:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - uses: actions/setup-python@v5
+        with: { python-version: "3.11" }
+      - name: Install deps
+        run: |
+          python -m pip install --upgrade pip
+          pip install -r requirements.txt
+          pip install ruff
+      - name: Lint
+        run: ruff check .
+      - name: Django checks
+        run: python manage.py check
+      - name: Build docker
+        run: docker build -t acr_gestao:ci .
