## Nginx Reverse Proxy (separado do App)
#
# Cenário recomendado:
# - App VM (Docker: Django+Gunicorn, Postgres, Redis) em 192.168.1.10:8000
# - Nginx CT (Proxmox) em 192.168.1.20, termina TLS e faz proxy
# - Domínios: acrsantatecla.duckdns.org e proformsc.duckdns.org
#
# Requisitos de volumes no container Nginx:
#   -v $(pwd)/certbot/www:/var/www/certbot
#   -v $(pwd)/certbot/conf:/etc/letsencrypt:ro
#   -v $(pwd)/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
#
# Comando típico (após obter certificados com webroot):
# docker run -d --name nginx -p 80:80 -p 443:443 \
#   -v "$(pwd)/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro" \
#   -v "$(pwd)/certbot/www:/var/www/certbot" \
#   -v "$(pwd)/certbot/conf:/etc/letsencrypt:ro" \
#   nginx:alpine

upstream app_upstream {
    # IP interno da VM de aplicação
    server 192.168.1.10:8000;
    keepalive 64;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name acrsantatecla.duckdns.org proformsc.duckdns.org;

    # ACME HTTP-01 challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirecionar restantes pedidos para HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name acrsantatecla.duckdns.org proformsc.duckdns.org;

    # Certificado SAN contendo ambos os domínios
    ssl_certificate     /etc/letsencrypt/live/acrsantatecla.duckdns.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/acrsantatecla.duckdns.org/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;
    # Opcional (se tiver dhparam local montado como /etc/ssl/dhparam.pem):
    # ssl_dhparam /etc/ssl/dhparam.pem;

    # Gzip básico
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Proxy geral para a app
    location / {
        proxy_pass http://app_upstream;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
    }

    # (Opcional) Cache amigável para assets estáticos servidos pelo WhiteNoise
    location ~* \.(?:css|js|woff2?|ttf|eot|ico|png|jpg|jpeg|gif|svg)$ {
        proxy_pass http://app_upstream;
        add_header Cache-Control "public, max-age=2592000, immutable";
    }
}

