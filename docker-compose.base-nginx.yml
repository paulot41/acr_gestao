services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: acrdb
      POSTGRES_USER: acruser
      POSTGRES_PASSWORD: acrpass
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U acruser -d acrdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: >
      postgres -c max_connections=100
               -c shared_buffers=128MB
               -c effective_cache_size=256MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100

  web:
    build: .
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles
      - logs_data:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_data:/app/staticfiles:ro
      - media_data:/app/media:ro
      - ./ssl:/etc/ssl/custom:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - web
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Certbot para certificados SSL automáticos
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    profiles: ["ssl"]

  # Serviço de backup automático
  backup:
    image: postgres:16
    depends_on:
      - db
    volumes:
      - ./backups:/backups
      - dbdata:/var/lib/postgresql/data:ro
    environment:
      PGPASSWORD: acrpass
    command: >
      bash -c "
      while true; do
        sleep 86400;
        pg_dump -h db -U acruser -d acrdb | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz;
        find /backups -name '*.sql.gz' -mtime +7 -delete;
      done"
    restart: unless-stopped
    profiles: ["backup"]

volumes:
  dbdata:
  static_data:
  media_data:
  logs_data:
