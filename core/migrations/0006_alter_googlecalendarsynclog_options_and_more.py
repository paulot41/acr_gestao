# Generated by Django 5.2.5 on 2025-09-05 23:36

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_event_description_event_google_calendar_id_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='googlecalendarsynclog',
            options={'ordering': ['-created_at'], 'verbose_name': 'Log de Sincronização', 'verbose_name_plural': 'Logs de Sincronização'},
        ),
        migrations.AlterModelOptions(
            name='resource',
            options={'ordering': ['entity_type', 'name'], 'verbose_name': 'Espaço', 'verbose_name_plural': 'Espaços'},
        ),
        migrations.RemoveField(
            model_name='modality',
            name='price_per_class',
        ),
        migrations.AddField(
            model_name='resource',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Criado em'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='resource',
            name='description',
            field=models.TextField(blank=True, help_text='Descrição detalhada do espaço', verbose_name='Descrição'),
        ),
        migrations.AddField(
            model_name='resource',
            name='entity_type',
            field=models.CharField(choices=[('acr', 'ACR (Ginásio)'), ('proform', 'Proform (Pilates/Wellness)'), ('both', 'Ambas')], default='acr', help_text='A que entidade este espaço pertence', max_length=20, verbose_name='Entidade'),
        ),
        migrations.AddField(
            model_name='resource',
            name='equipment_list',
            field=models.TextField(blank=True, help_text='Lista de equipamentos disponíveis', verbose_name='Equipamentos'),
        ),
        migrations.AddField(
            model_name='resource',
            name='is_available',
            field=models.BooleanField(default=True, help_text='Se o espaço está disponível para uso', verbose_name='Disponível'),
        ),
        migrations.AddField(
            model_name='resource',
            name='special_features',
            field=models.TextField(blank=True, help_text='Ar condicionado, espelhos, etc.', verbose_name='Características Especiais'),
        ),
        migrations.AddField(
            model_name='resource',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Atualizado em'),
        ),
        migrations.AlterField(
            model_name='googlecalendarsynclog',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Criado em'),
        ),
        migrations.AlterField(
            model_name='googlecalendarsynclog',
            name='google_calendar_id',
            field=models.CharField(blank=True, max_length=255, verbose_name='Google Calendar ID'),
        ),
        migrations.AlterField(
            model_name='googlecalendarsynclog',
            name='google_event_id',
            field=models.CharField(blank=True, max_length=255, verbose_name='Google Event ID'),
        ),
        migrations.AlterField(
            model_name='googlecalendarsynclog',
            name='status',
            field=models.CharField(choices=[('pending', 'Pendente'), ('success', 'Sucesso'), ('error', 'Erro')], default='pending', max_length=10, verbose_name='Estado'),
        ),
        migrations.AlterField(
            model_name='googlecalendarsynclog',
            name='sync_data',
            field=models.JSONField(blank=True, default=dict, verbose_name='Dados de Sincronização'),
        ),
        migrations.AlterField(
            model_name='googlecalendarsynclog',
            name='sync_type',
            field=models.CharField(choices=[('create', 'Criar'), ('update', 'Atualizar'), ('delete', 'Eliminar')], max_length=10, verbose_name='Tipo de Sincronização'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='capacity',
            field=models.PositiveIntegerField(default=10, help_text='Número máximo de pessoas', verbose_name='Capacidade Máxima'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='name',
            field=models.CharField(max_length=120, verbose_name='Nome do Espaço'),
        ),
        migrations.CreateModel(
            name='PaymentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Nome do Plano')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('plan_type', models.CharField(choices=[('monthly', 'Mensalidade'), ('credits', 'Créditos para Aulas'), ('unlimited', 'Ilimitado')], default='monthly', max_length=20, verbose_name='Tipo de Plano')),
                ('entity_type', models.CharField(choices=[('acr', 'ACR (Ginásio)'), ('proform', 'Proform (Pilates/Wellness)'), ('both', 'Ambas')], default='acr', max_length=20, verbose_name='Entidade')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Preço')),
                ('duration_months', models.PositiveIntegerField(default=1, help_text='Para planos mensais', verbose_name='Duração (meses)')),
                ('credits_included', models.PositiveIntegerField(default=0, help_text='Número de aulas incluídas', verbose_name='Créditos Incluídos')),
                ('credits_validity_days', models.PositiveIntegerField(default=30, help_text='Dias para usar os créditos', verbose_name='Validade dos Créditos (dias)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('modalities', models.ManyToManyField(blank=True, help_text='Modalidades incluídas neste plano', to='core.modality')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organization')),
            ],
            options={
                'verbose_name': 'Plano de Pagamento',
                'verbose_name_plural': 'Planos de Pagamento',
                'ordering': ['entity_type', 'plan_type', 'name'],
                'unique_together': {('organization', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ClientSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Ativo'), ('expired', 'Expirado'), ('suspended', 'Suspenso'), ('cancelled', 'Cancelado')], default='active', max_length=20, verbose_name='Estado')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Data de Início')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Data de Fim')),
                ('remaining_credits', models.PositiveIntegerField(default=0, verbose_name='Créditos Restantes')),
                ('credits_expire_date', models.DateField(blank=True, null=True, verbose_name='Data de Expiração dos Créditos')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Pago')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Data de Pagamento')),
                ('notes', models.TextField(blank=True, verbose_name='Notas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organization')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='core.person')),
                ('payment_plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='core.paymentplan')),
            ],
            options={
                'verbose_name': 'Subscrição de Cliente',
                'verbose_name_plural': 'Subscrições de Clientes',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('admin', 'Administrador Total'), ('staff', 'Staff (Leitura + Marcações)'), ('instructor', 'Instrutor'), ('client', 'Cliente')], default='client', max_length=20, verbose_name='Tipo de Utilizador')),
                ('can_view_finances', models.BooleanField(default=False, verbose_name='Ver Finanças')),
                ('can_manage_bookings', models.BooleanField(default=True, verbose_name='Gerir Marcações')),
                ('can_view_all_clients', models.BooleanField(default=True, verbose_name='Ver Todos os Clientes')),
                ('can_create_events', models.BooleanField(default=False, verbose_name='Criar Eventos')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('instructor', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to='core.instructor')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organization')),
                ('person', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to='core.person')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de Utilizador',
                'verbose_name_plural': 'Perfis de Utilizadores',
                'unique_together': {('organization', 'user')},
            },
        ),
    ]
